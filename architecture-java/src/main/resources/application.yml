# 分库分表
server:
  port: 1001
  tomcat:
    uri-encoding: utf-8
    accept-count: 700  # 可以放到处理队列中的请求数
    max-threads: 1000  # 最大并发数
    max-connections: 20000 # 接受和处理的最大连接数
    min-spare-threads: 20 # 初始化时创建的线程数
spring:
  redis:
    timeout: 60000
    database: 0
    password: redis123
    host: 127.0.0.1
    port: 6379
mybatis:
    mapper-locations: classpath:/mapper/*.xml

sharding:
  jdbc:
    datasource:
      names: ds0,ds1
      # 数据源ds0
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shading
        username: root
        password: 199011081108
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shading2
        username: root
        password: 199011081108
    config:
      sharding:
        props:
          sql.show: true
        tables:
          t_user:  #t_user表
            key-generator-column-name: id  #主键
            actual-data-nodes: ds${0..1}.t_user${0..1}
            database-strategy:   #分库策略
              inline: # 行表达式
                sharding-column: city_id        #列名称，多个列以逗号分隔
                algorithm-expression: ds${city_id % 2}    #按模运算分配
            table-strategy:  #分表策略
              inline: # 行表达式
                sharding-column: sex
                algorithm-expression: t_user${sex % 2}  #按模运算分配

          t_address:
            key-generator-column-name: id
            actual-data-nodes: ds${0..1}.t_address
            database-strategy:
              inline:
                sharding-column: lit
                algorithm-expression: ds${lit % 2}
